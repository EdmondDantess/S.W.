{"version":3,"file":"static/js/3.c1c6643e.chunk.js","mappings":"kLACA,GAAgB,QAAU,yBAAyB,kBAAoB,mCAAmC,SAAW,0BAA0B,eAAiB,gCAAgC,SAAW,0BAA0B,SAAW,0BAA0B,cAAgB,+BAA+B,OAAS,yB,gDCOrTA,EAAa,WACtB,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAEpBC,GAAWC,EAAAA,EAAAA,MASjB,OAPAC,EAAAA,EAAAA,YAAU,WAEN,OADAF,GAASG,EAAAA,EAAAA,IAAS,EAAGR,EAAU,CAACS,KAAM,GAAIC,QAAQ,KAC3C,WACHL,GAASM,EAAAA,EAAAA,IAAU,CAACF,KAAM,GAAIC,OAAQ,WAE3C,KAGC,iBAAKE,UAAWC,EAAAA,OAAhB,WACD,iBAAMC,MAAO,CAACC,MAAO,SAArB,uBACK,kBAEIZ,EAAMa,KAAI,SAAAC,GACN,OACI,iBAAKH,MAAO,CAACI,QAAS,QAAtB,WAGI,gBAAKC,IAAwB,OAAnBF,EAAEG,OAAOC,MAAiBJ,EAAEG,OAAOC,MAAQC,EAChDR,MAAO,CAACS,MAAO,QACfC,IAAI,YACT,gBACIC,MAAOR,EAAES,KAAOT,EAAES,KAAO,GACzBZ,MAAO,CACHC,MAAO,aAAcY,SAAU,OAAQC,UAAW,OAClDC,aAAc,kBAAmBN,MAAO,OACxCO,WAAY,mBALpB,SAMQb,EAAES,SAXJT,EAAEc,WCtBvBC,EAAU,SAACC,GACtB,OAAO,gBAAKrB,UAAWC,EAAAA,QAAhB,SAA8BoB,EAAMC,Q,uCCCvCC,GAAsBC,EAAAA,EAAAA,GAAiB,KAmDvCC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,wBAArCD,EAfmD,SAACL,GAC5E,OACI,0BACI,kBAAMO,SAAUP,EAAMQ,aAAc7B,UAAWC,EAAAA,SAA/C,WACI,SAAC6B,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAsBT,KAAK,iBACrEqB,YAAY,qBAAqBnC,UAAWC,EAAAA,iBACnD,mBAAQD,UAAWC,EAAAA,iBAAnB,0B,oBCXhB,GAAemC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KApBoB,SAACC,GACrB,MAAO,CACHA,MAAOA,EAAMC,gBAGM,SAAC9C,GACxB,MAAO,CACH+C,WAAY,SAACC,GACThD,GAASiD,EAAAA,EAAAA,GAAoBD,KAGjCE,oBAAqB,SAACC,EAAuCC,GAC3C,UAAVD,EAAEE,KACFrD,GAASiD,EAAAA,EAAAA,GAAoBG,SAQzCE,EAAAA,EAFJ,ED7BuB,SAAC1B,GACpB,IAAIiB,EAAQjB,EAAMiB,MAGdU,GAAQC,EAAAA,EAAAA,QAA8B,MAEtCC,EAAWZ,EAAMa,YAAY/C,KAAI,SAACgD,GAClC,OACI,gBAAKpD,UAAWC,EAAAA,SAA0BkB,GAAE,WAAMiC,EAAGjC,GAAT,aAAwBkC,IAAKL,EAAzE,UACI,SAAC5B,EAAD,CAASE,KAAM8B,EAAGE,WADaF,EAAGjC,QAM9CxB,EAAAA,EAAAA,YAAU,WACNqD,EAAMO,SAAWP,EAAMO,QAAQC,mBAChC,CAACnC,EAAMiB,MAAMa,cAOhB,OACI,iBAAKnD,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,kBAAhB,UACI,SAACd,EAAD,OAEJ,gBAAKa,UAAWC,EAAAA,eAAhB,SAAqCiD,KACrC,SAACzB,EAAD,CAAqBG,SAXZ,SAAC6B,GACdpC,EAAMmB,WAAWiB,EAASC,gBAC1BD,EAASC,eAAiB,a,gIEtB5BC,EAAgB,SAACrB,GACnB,MAAO,CACHsB,OAAQtB,EAAMuB,KAAKD,SAIpB,SAASb,EAAoBe,GAMhC,OAAOzB,EAAAA,EAAAA,IAAQsB,EAARtB,EALP,SAA2BhB,GACvB,IAAKuC,EAAwBvC,EAAxBuC,OAAWG,GAAhB,OAA6B1C,EAA7B,GACA,OAAKuC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUC,GAAG","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__kP-Vn\",\"parentDialogsItem\":\"Dialogs_parentDialogsItem__UoGTR\",\"messages\":\"Dialogs_messages__6wrFq\",\"parentMessages\":\"Dialogs_parentMessages__IZPk9\",\"avatarka\":\"Dialogs_avatarka__AcsZw\",\"formText\":\"Dialogs_formText__CmLkk\",\"textAreaInput\":\"Dialogs_textAreaInput__Dn0Ly\",\"dialog\":\"Dialogs_dialog__1SUcP\"};","import React, {useEffect} from 'react';\r\nimport obc from './../Dialogs.module.css';\r\nimport {getUsers, setFilter} from '../../../redux/users-reducer';\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getPageSize, getUsersS} from '../../../redux/users-selectors';\r\n\r\n\r\nexport const DialogItem = () => {\r\n    const pageSize = useSelector(getPageSize)\r\n    const users = useSelector(getUsersS)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsers(1, pageSize, {term: '', friend: true}))\r\n        return () => {\r\n            dispatch(setFilter({term: '', friend: null}))\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={obc.dialog}>\r\n       <span style={{color: \"white\"}}>Friends:</span>\r\n            <hr/>\r\n            {\r\n                users.map(u => {\r\n                    return (\r\n                        <div style={{display: 'flex'}}\r\n                             key={u.id}\r\n                        >\r\n                            <img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                                 style={{width: '40px'}}\r\n                                 alt=\"avatar\"/>\r\n                            <div\r\n                                title={u.name ? u.name : ''}\r\n                                style={{\r\n                                    color: 'whitesmoke', fontSize: '14px', overflowX: 'clip',\r\n                                    borderBottom: '1px solid white', width: '100%',\r\n                                    borderLeft: '1px solid white',\r\n                                }}>{u.name}</div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport obc from \"./../Dialogs.module.css\";\r\n\r\ntype MessageTypeProps = {\r\n  text: string;\r\n};\r\n\r\nexport const Message = (props: MessageTypeProps) => {\r\n  return <div className={obc.message}>{props.text}</div>;\r\n};\r\n","import React, {useEffect, useRef} from 'react';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport obc from './Dialogs.module.css';\r\nimport {Message} from './Message/Message';\r\nimport {TypeDialogProps} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {TextArea} from '../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, requered} from '../../utils/validators/validators';\r\n\r\nconst validatorMaxSymbols = maxLengthCreator(100)\r\n\r\nexport const Dialogs = (props: TypeDialogProps) => {\r\n    let state = props.state\r\n\r\n\r\n    let myRef = useRef<null | HTMLDivElement>(null)\r\n\r\n    let messages = state.messageData.map((el) => {\r\n        return (\r\n            <div className={obc.messages} key={el.id} id={`#${el.id}-messages`} ref={myRef}>\r\n                <Message text={el.message}/>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    useEffect(() => {\r\n        myRef.current && myRef.current.scrollIntoView()\r\n    }, [props.state.messageData])\r\n\r\n    const onSubmit = (formData: FormDataTypeDialog) => {\r\n        props.addMessage(formData.newMessageBody)\r\n        formData.newMessageBody = ''\r\n    }\r\n\r\n    return (\r\n        <div className={obc.dialogs}>\r\n            <div className={obc.parentDialogsItem}>\r\n                <DialogItem/>\r\n            </div>\r\n            <div className={obc.parentMessages}>{messages}</div>\r\n            <AddMessageFormRedux onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataTypeDialog>> = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit} className={obc.formText}>\r\n                <Field component={TextArea} validate={[requered, validatorMaxSymbols]} name=\"newMessageBody\"\r\n                       placeholder=\"Enter your message\" className={obc.textAreaInput}/>\r\n                <button className={obc.buttonInTextArea}>Send</button>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\ntype FormDataTypeDialog = {\r\n    newMessageBody: string\r\n}\r\nconst AddMessageFormRedux = reduxForm<FormDataTypeDialog>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","import React, {KeyboardEvent} from 'react';\r\nimport {addMessageInDialogs, DialogsPageInitialStateType,} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppstateType} from '../../redux/redux-store';\r\nimport {compose, Dispatch} from 'redux';\r\n\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\n\r\n\r\ntype MapStateProps = {\r\n    state: DialogsPageInitialStateType\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    addMessage: (newMes: string) => void\r\n    keyPressHandlerText: (e: KeyboardEvent<HTMLTextAreaElement>, valueText: string) => void\r\n}\r\n\r\nexport type  TypeDialogProps = MapStateProps & MapDispatchProps\r\n\r\nconst mapStateToProps = (state: AppstateType): MapStateProps => {\r\n    return {\r\n        state: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchProps => {\r\n    return {\r\n        addMessage: (newMes: string) => {\r\n            dispatch(addMessageInDialogs(newMes))\r\n        },\r\n\r\n        keyPressHandlerText: (e: KeyboardEvent<HTMLTextAreaElement>, messageValueTextarea: string) => {\r\n            if (e.key === 'Enter') {\r\n                dispatch(addMessageInDialogs(messageValueTextarea))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppstateType} from '../redux/redux-store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateProps = (state: AppstateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n    return connect(mapStateProps)(RedirectComponent)\r\n}"],"names":["DialogItem","pageSize","useSelector","getPageSize","users","getUsersS","dispatch","useDispatch","useEffect","getUsers","term","friend","setFilter","className","obc","style","color","map","u","display","src","photos","small","userPhoto","width","alt","title","name","fontSize","overflowX","borderBottom","borderLeft","id","Message","props","text","validatorMaxSymbols","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","requered","placeholder","compose","connect","state","dialogsPage","addMessage","newMes","addMessageInDialogs","keyPressHandlerText","e","messageValueTextarea","key","WithAuthRedirect","myRef","useRef","messages","messageData","el","ref","message","current","scrollIntoView","formData","newMessageBody","mapStateProps","isAuth","auth","Component","restProps","to"],"sourceRoot":""}