{"version":3,"file":"static/js/979.dba476c2.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusHooks.tsx","components/Profile/ProfileInfo/ProfileEditForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"INfo\":\"Profile_INfo__sIwqu\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__BvgVD\",\"imgHead\":\"ProfileInfo_imgHead__CQu0v\",\"descriptionTextInfo\":\"ProfileInfo_descriptionTextInfo__B5n8q\",\"parentDivProfileInfo\":\"ProfileInfo_parentDivProfileInfo__+aQdH\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatusHooks = (props: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [localstatus, setLocalStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        props.isOwner &&   setEditMode(true)\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(localstatus)\r\n    }\r\n    const statusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b> <span\r\n                    onDoubleClick={activateEditMode}>{props.status}</span>\r\n                </div>}\r\n            {editMode &&\r\n                <div>\r\n                    <input value={localstatus}\r\n                           onChange={statusChange}\r\n                           autoFocus\r\n                           onBlur={deActivateEditMode}/>\r\n                </div>}\r\n        </div>\r\n    );\r\n\r\n}\r\n","import React, {FC, useState} from 'react';\r\nimport {ProfileType} from '../../../redux/types/types';\r\nimport {useDispatch} from 'react-redux';\r\nimport {saveProfile} from '../../../redux/profile-reducer';\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType | any\r\n    updateProfileData?: (data: ProfileType, userId: string) => void\r\n    setEditMode: () => void\r\n}\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormPropsType> = ({profile, updateProfileData, setEditMode}) => {\r\nconst dispatch = useDispatch()\r\n\r\n\r\n    const [profileData, setProfileData] = useState<ProfileDataType>({\r\n        fullName: profile!.fullName,\r\n        lookingForAJob: profile!.lookingForAJob,\r\n        lookingForAJobDescription: profile!.lookingForAJobDescription as string,\r\n        aboutMe: profile!.aboutMe as string,\r\n\r\n    })\r\n\r\n\r\n    const inputFullName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setProfileData({...profileData, fullName: e.currentTarget.value})\r\n    }\r\n\r\n    const inputDescription = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setProfileData({...profileData, lookingForAJobDescription: e.currentTarget.value})\r\n    }\r\n\r\n    const inputAboutMe = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setProfileData({...profileData, aboutMe: e.currentTarget.value})\r\n    }\r\n\r\n    const radioLookingForAJob = (value: boolean) => {\r\n        setProfileData({...profileData, lookingForAJob: value})\r\n    }\r\n\r\n    const newData: any = {\r\n        userId: profile!.userId,\r\n        contacts: {\r\n            github: '',\r\n            vk: '',\r\n            facebook: '',\r\n            instagram: '',\r\n            twitter: '',\r\n            website: '',\r\n            youtube: '',\r\n            mainLink: '',\r\n        },\r\n        ...profileData\r\n    }\r\n    // const newData = {...profileData}\r\n\r\n    const onCLickHandler = () => {\r\n    dispatch(saveProfile(newData))\r\n        // updateProfileData(newData, String(profile!.userId))\r\n        setEditMode()\r\n    }\r\n\r\n    return (\r\n        <form style={{backgroundColor: '#4db2ef'}}>\r\n            <div>\r\n                <b>Full Name</b>: <input value={profileData.fullName} onChange={inputFullName}/>\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                <label>\r\n                    <input type=\"radio\" name={'radio'} value={'true'} checked={profileData.lookingForAJob}\r\n                           onChange={() => radioLookingForAJob(true)}/> yes\r\n                    <input type=\"radio\" name={'radio'} value={'false'} checked={!profileData.lookingForAJob}\r\n                           onChange={() => radioLookingForAJob(false)}/> no\r\n                </label>\r\n            </div>\r\n            {profileData.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: <input value={profileData.lookingForAJobDescription}\r\n                                                          onChange={inputDescription}/>\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: <input value={profileData.aboutMe} onChange={inputAboutMe}/>\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n            <div style={{display: 'flex', justifyContent: 'flex-end', marginTop: 10}}>\r\n                <button onClick={onCLickHandler}>Save</button>\r\n                  <button onClick={() => setEditMode()}>X</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport type ProfileDataType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}","import React, {useState} from 'react';\r\nimport obc from './ProfileInfo.module.css';\r\nimport {Preloader} from '../../../common/Preloader/Preloader';\r\nimport {ProfileStatusHooks} from './ProfileStatusHooks';\r\nimport user from '../../../assets/images/user.png'\r\nimport {ProfilePageInitialStateType} from '../../../redux/profile-reducer';\r\nimport {ProfileDataForm} from './ProfileEditForm';\r\n\r\n\r\nexport type ProfileInfoPropsType = {\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType & ProfilePageInitialStateType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n    const onMainPhotoSelect = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    let avatar = props.profile.photos.large\r\n\r\n    return (\r\n        <div className={obc.parentDivProfileInfo}>\r\n            <ProfileStatusHooks status={props.status ? props.status : 'No status'}\r\n                                updateStatus={props.updateStatus}\r\n                                isOwner={props.isOwner}/>\r\n            {props.isOwner && <label><input type=\"file\" onChange={onMainPhotoSelect} style={{width: '109px'}}/>\r\n                <span>Upload your avatar</span> </label>}\r\n            <div className={obc.description}>\r\n                <img src={avatar ? avatar : user} alt=\"Users Avatar losted\" style={{width: '300px'}}/>\r\n                {props.isOwner && !editMode && <button onClick={onEditMode} style={{height: '40px', width: '80%', margin: 'auto'}}>Edit info</button>}\r\n                {editMode\r\n                    ? <ProfileDataForm setEditMode={offEditMode} profile={props.profile} />\r\n                    : <div className={obc.descriptionTextInfo}>\r\n                        <div><b><i>Fullname:</i></b><b\r\n                            style={{color: 'blanchedalmond', fontSize: '20px'}}>{props.profile.fullName}</b></div>\r\n                        <div><b><i>about me:</i></b> {props.profile.aboutMe ? props.profile.aboutMe : 'no info'}\r\n                        </div>\r\n                        <div>\r\n                            <b><i>Looking for a job:</i> </b> {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n                        </div>\r\n                        {props.profile.lookingForAJob &&\r\n                            <div>\r\n                                <b><i>My professional skils:</i> </b> {props.profile.lookingForAJobDescription}\r\n                            </div>\r\n                        }\r\n                        {/*<div><b>Contacts:</b></div>*/}\r\n                        {/*<hr/>*/}\r\n                        {/*{Object.keys(props.profile.contacts).map(key => {*/}\r\n                        {/*    // @ts-ignore*/}\r\n                        {/*    return <div key={key}><b><i>{key}</i></b>: {props.profile.contacts[key] || 'info'}</div>*/}\r\n                        {/*})}*/}\r\n                        <hr/>\r\n                    </div>}\r\n            </div>\r\n        </div>\r\n    )\r\n        ;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__7JsbF\",\"posts\":\"MyPosts_posts__syEqK\",\"formText\":\"MyPosts_formText__NcpBS\",\"textAreaInput\":\"MyPosts_textAreaInput__bK6Zx\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__8Cr6b\",\"avatarPost\":\"Post_avatarPost__iLU56\",\"footerPost\":\"Post_footerPost__3Jib6\"};","import React, {useState} from 'react';\r\nimport obc from './Post.module.css';\r\nimport Like from '../../../../assets/images/likepng.png'\r\nimport userPhoto from '../../../../assets/images/user.png'\r\n\r\ntype PostTypeProps = {\r\n    message: string\r\n    Likes: number\r\n    avatars: string | null\r\n}\r\n\r\n\r\nexport const Post = (props: PostTypeProps) => {\r\n\r\n    let [like, setLike] = useState(props.Likes)\r\n\r\n    return (\r\n        <div className={obc.item}>\r\n            <img\r\n                src={props.avatars ? props.avatars : userPhoto}\r\n                alt=\"download img fail\"\r\n                className={obc.avatarPost}/>\r\n            {props.message}\r\n            <div className={obc.footerPost}><img\r\n                onClick={() => setLike(like + 1)}\r\n                src={Like} alt=\"Likes\"\r\n                style={{height: '30px'}}/><span\r\n            > {like}</span></div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport obc from './MyPosts.module.css';\r\nimport {Post} from './Post/Post';\r\nimport {TypeMyPostsProps} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, requered} from '../../../utils/validators/validators';\r\nimport {TextArea} from '../../../common/FormsControls/FormsControls';\r\n\r\n\r\nconst validatorMaxSymbols = maxLengthCreator(50)\r\n\r\nexport const MyPosts = React.memo((props: TypeMyPostsProps) => {\r\n    let posts = props.state.postsData.map((el) => {\r\n        return (\r\n            <div className={obc.posts} key={el.id}>\r\n                <Post message={el.message} Likes={el.Likes}\r\n                      avatars={props.state.profile.photos.large as null | string}/>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    const onSendPostHandler = (values: FormDataTypePosts) => {\r\n        props.sendPostHandler(values.newPosts)\r\n        values.newPosts = ''\r\n    }\r\n\r\n    return (\r\n        <div className={obc.postsBlock}>\r\n            <div>\r\n                <AddNewPostFormRedux onSubmit={onSendPostHandler}/>\r\n            </div>\r\n            {posts}\r\n        </div>);\r\n})\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<any>> = React.memo((props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit} className={obc.formText}>\r\n                <Field component={TextArea} validate={[requered, validatorMaxSymbols]} name=\"newPosts\"\r\n                       placeholder=\"Enter your message\" className={obc.textAreaInput}/>\r\n                <button className={obc.buttonInTextArea}>Send</button>\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FormDataTypePosts = {\r\n    newPosts: string\r\n}\r\nconst AddNewPostFormRedux = reduxForm<FormDataTypePosts>({form: 'postsFormRedux'})(AddNewPostForm)","import React, {KeyboardEvent} from 'react';\r\nimport {addPost, ProfilePageInitialStateType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppstateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type  TypeMyPostsProps = MapStateProps & MapDispatchProps\r\n\r\ntype MapStateProps = {\r\n    state: ProfilePageInitialStateType\r\n}\r\ntype MapDispatchProps = {\r\n    sendPostHandler: (postTextValue: string) => void\r\n    keyPressHandlerText: (e: KeyboardEvent<HTMLTextAreaElement>, postTextValue: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppstateType): MapStateProps => {\r\n    return {\r\n        state: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchProps => {\r\n    return {\r\n        sendPostHandler: (postTextValue: string) => {\r\n            dispatch(addPost(postTextValue))\r\n        },\r\n        keyPressHandlerText: (e: KeyboardEvent<HTMLTextAreaElement>, postTextValue: string ) => {\r\n            if (e.key === \"Enter\") {\r\n                dispatch(addPost(postTextValue))\r\n            }\r\n        },\r\n    }\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n","import React from 'react';\r\nimport obc from './Profile.module.css';\r\nimport {ProfileInfo, ProfileInfoPropsType} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfilePageInitialStateType} from '../../redux/profile-reducer';\r\n\r\nexport const Profile = (props: ProfileInfoPropsType & ProfilePageInitialStateType) => {\r\n    return (\r\n        <div className={obc.INfo}>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile}\r\n                         status={props.status} updateStatus={props.updateStatus} postsData={props.postsData}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfilePageInitialStateType,\r\n    savePhoto,\r\n    setUserProfile,\r\n    updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppstateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {NullOrNumber} from '../../redux/types/types';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype Mstdpt = {\r\n    setUserProfile: (profile: ProfilePageInitialStateType) => void\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport type MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\nexport type OwnProfilePropsType = MapStateToPropsType & Mstdpt\r\nexport type ProfilePropsType = RouteComponentProps<PathParamsType> & OwnProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: NullOrNumber = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId as number)\r\n        this.props.getStatus(userId as number)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfilePropsType, prevState: ProfilePropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                postsData={this.props.postsData}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppstateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        postsData: state.profilePage.postsData\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        updateStatus,\r\n        getStatus,\r\n        setUserProfile,\r\n        savePhoto,\r\n        getUserProfile\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect)(ProfileContainer)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppstateType} from '../redux/redux-store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateProps = (state: AppstateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n    return connect(mapStateProps)(RedirectComponent)\r\n}"],"names":["ProfileStatusHooks","props","useState","editMode","setEditMode","status","localstatus","setLocalStatus","useEffect","onDoubleClick","isOwner","value","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileDataForm","profile","updateProfileData","dispatch","useDispatch","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","profileData","setProfileData","radioLookingForAJob","newData","userId","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","style","backgroundColor","type","name","checked","display","justifyContent","marginTop","onClick","saveProfile","ProfileInfo","Preloader","avatar","photos","large","className","obc","target","files","length","savePhoto","width","src","user","alt","height","margin","color","fontSize","Post","Likes","like","setLike","avatars","userPhoto","message","Like","validatorMaxSymbols","maxLengthCreator","MyPosts","React","posts","state","postsData","map","el","id","AddNewPostFormRedux","onSubmit","values","sendPostHandler","newPosts","AddNewPostForm","handleSubmit","Field","component","TextArea","validate","requered","placeholder","reduxForm","form","MyPostsContainer","connect","profilePage","postTextValue","addPost","keyPressHandlerText","key","Profile","ProfileContainer","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","compose","auth","isAuth","setUserProfile","withRouter","WithAuthRedirect","mapStateProps","Component","restProps","to"],"sourceRoot":""}