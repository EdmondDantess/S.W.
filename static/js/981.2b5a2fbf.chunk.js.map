{"version":3,"file":"static/js/981.2b5a2fbf.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"INfo\":\"Profile_INfo__sIwqu\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__BvgVD\",\"imgHead\":\"ProfileInfo_imgHead__CQu0v\",\"descriptionTextInfo\":\"ProfileInfo_descriptionTextInfo__B5n8q\",\"parentDivProfileInfo\":\"ProfileInfo_parentDivProfileInfo__+aQdH\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatusHooks = (props: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [localstatus, setLocalStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        props.isOwner &&   setEditMode(true)\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(localstatus)\r\n    }\r\n    const statusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b> <span\r\n                    onDoubleClick={activateEditMode}>{props.status}</span>\r\n                </div>}\r\n            {editMode &&\r\n                <div>\r\n                    <input value={localstatus}\r\n                           onChange={statusChange}\r\n                           autoFocus\r\n                           onBlur={deActivateEditMode}/>\r\n                </div>}\r\n        </div>\r\n    );\r\n\r\n}\r\n","import React from 'react';\r\nimport obc from './ProfileInfo.module.css';\r\nimport {Preloader} from '../../../common/Preloader/Preloader';\r\nimport {ProfileStatusHooks} from './ProfileStatusHooks';\r\nimport user from '../../../assets/images/user.png'\r\nimport {ProfilePageInitialStateType} from '../../../redux/profile-reducer';\r\n\r\n\r\nexport type ProfileInfoPropsType = {\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType & ProfilePageInitialStateType) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelect = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    let avatar = props.profile.photos.large\r\n\r\n    return (\r\n        <div className={obc.parentDivProfileInfo}>\r\n            <ProfileStatusHooks status={props.status ? props.status : 'No status'}\r\n                                updateStatus={props.updateStatus}\r\n            isOwner={props.isOwner}/>\r\n            {props.isOwner && <label><input type=\"file\" onChange={onMainPhotoSelect} style={{width: '109px'}}/>\r\n                <span>Upload your avatar</span> </label>}\r\n            <div className={obc.description}>\r\n                <img src={avatar ? avatar : user} alt=\"Users Avatar losted\" style={{width: '300px'}}/>\r\n                <div className={obc.descriptionTextInfo}>\r\n                    <div><b><i>Fullname:</i></b> <b style={{color: 'blanchedalmond', fontSize: '20px'}}>{props.profile.fullName}</b></div>\r\n                    <div><b><i>about me:</i></b> {props.profile.aboutMe ? props.profile.aboutMe : 'not yet added'}</div>\r\n                    <div><b>Contacts:</b></div>\r\n                    <div><b><i>github:</i></b> {props.profile.contacts.github ? props.profile.contacts.instagram : 'github.com'}</div>\r\n                    <div><b><i>instagram:</i></b>{props.profile.contacts.instagram ? props.profile.contacts.instagram : 'instagram.com'}</div>\r\n                    <div><b><i>facebook:</i></b> {props.profile.contacts.facebook ? props.profile.contacts.facebook : 'facebook.com'}</div>\r\n                    <div><b><i>vk:</i></b> {props.profile.contacts.vk ? props.profile.contacts.vk : 'vk.com'}</div>\r\n                    <div><b><i>website:</i></b> {props.profile.contacts.website ? props.profile.contacts.website : 'no site'}</div>\r\n                    <hr/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__7JsbF\",\"posts\":\"MyPosts_posts__syEqK\",\"formText\":\"MyPosts_formText__NcpBS\",\"textAreaInput\":\"MyPosts_textAreaInput__bK6Zx\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__8Cr6b\",\"avatarPost\":\"Post_avatarPost__iLU56\",\"footerPost\":\"Post_footerPost__3Jib6\"};","import React, {useState} from 'react';\r\nimport obc from './Post.module.css';\r\nimport Like from '../../../../assets/images/likepng.png'\r\nimport userPhoto from '../../../../assets/images/user.png'\r\n\r\ntype PostTypeProps = {\r\n    message: string\r\n    Likes: number\r\n    avatars: string | null\r\n}\r\n\r\n\r\nexport const Post = (props: PostTypeProps) => {\r\n\r\n    let [like, setLike] = useState(props.Likes)\r\n\r\n    return (\r\n        <div className={obc.item}>\r\n            <img\r\n                src={props.avatars ? props.avatars : userPhoto}\r\n                alt=\"download img fail\"\r\n                className={obc.avatarPost}/>\r\n            {props.message}\r\n            <div className={obc.footerPost}><img\r\n                onClick={() => setLike(like + 1)}\r\n                src={Like} alt=\"Likes\"\r\n                style={{height: '30px'}}/><span\r\n            > {like}</span></div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport obc from './MyPosts.module.css';\r\nimport {Post} from './Post/Post';\r\nimport {TypeMyPostsProps} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, requered} from '../../../utils/validators/validators';\r\nimport {TextArea} from '../../../common/FormsControls/FormsControls';\r\n\r\n\r\nconst validatorMaxSymbols = maxLengthCreator(50)\r\n\r\nexport const MyPosts = React.memo((props: TypeMyPostsProps) => {\r\n    let posts = props.state.postsData.map((el) => {\r\n        return (\r\n            <div className={obc.posts} key={el.id}>\r\n                <Post message={el.message} Likes={el.Likes}\r\n                      avatars={props.state.profile.photos.large as null | string}/>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    const onSendPostHandler = (values: FormDataTypePosts) => {\r\n        props.sendPostHandler(values.newPosts)\r\n        values.newPosts = ''\r\n    }\r\n\r\n    return (\r\n        <div className={obc.postsBlock}>\r\n            <div>\r\n                <AddNewPostFormRedux onSubmit={onSendPostHandler}/>\r\n            </div>\r\n            {posts}\r\n        </div>);\r\n})\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<any>> = React.memo((props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit} className={obc.formText}>\r\n                <Field component={TextArea} validate={[requered, validatorMaxSymbols]} name=\"newPosts\"\r\n                       placeholder=\"Enter your message\" className={obc.textAreaInput}/>\r\n                <button className={obc.buttonInTextArea}>Send</button>\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FormDataTypePosts = {\r\n    newPosts: string\r\n}\r\nconst AddNewPostFormRedux = reduxForm<FormDataTypePosts>({form: 'postsFormRedux'})(AddNewPostForm)","import React, {KeyboardEvent} from 'react';\r\nimport {addPost, ProfilePageInitialStateType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppstateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type  TypeMyPostsProps = MapStateProps & MapDispatchProps\r\n\r\ntype MapStateProps = {\r\n    state: ProfilePageInitialStateType\r\n}\r\ntype MapDispatchProps = {\r\n    sendPostHandler: (postTextValue: string) => void\r\n    keyPressHandlerText: (e: KeyboardEvent<HTMLTextAreaElement>, postTextValue: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppstateType): MapStateProps => {\r\n    return {\r\n        state: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchProps => {\r\n    return {\r\n        sendPostHandler: (postTextValue: string) => {\r\n            dispatch(addPost(postTextValue))\r\n        },\r\n        keyPressHandlerText: (e: KeyboardEvent<HTMLTextAreaElement>, postTextValue: string ) => {\r\n            if (e.key === \"Enter\") {\r\n                dispatch(addPost(postTextValue))\r\n            }\r\n        },\r\n    }\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n","import React from 'react';\r\nimport obc from './Profile.module.css';\r\nimport {ProfileInfo, ProfileInfoPropsType} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfilePageInitialStateType} from '../../redux/profile-reducer';\r\n\r\nexport const Profile = (props: ProfileInfoPropsType & ProfilePageInitialStateType) => {\r\n    return (\r\n        <div className={obc.INfo}>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile}\r\n                         status={props.status} updateStatus={props.updateStatus} postsData={props.postsData}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfilePageInitialStateType,\r\n    savePhoto,\r\n    setUserProfile,\r\n    updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppstateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {NullOrNumber} from '../../redux/types/types';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype Mstdpt = {\r\n    setUserProfile: (profile: ProfilePageInitialStateType) => void\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport type MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\nexport type OwnProfilePropsType = MapStateToPropsType & Mstdpt\r\nexport type ProfilePropsType = RouteComponentProps<PathParamsType> & OwnProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: NullOrNumber = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId as number)\r\n        this.props.getStatus(userId as number)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfilePropsType, prevState: ProfilePropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                postsData={this.props.postsData}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppstateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        postsData: state.profilePage.postsData\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        updateStatus,\r\n        getStatus,\r\n        setUserProfile,\r\n        savePhoto,\r\n        getUserProfile\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect)(ProfileContainer)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppstateType} from '../redux/redux-store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateProps = (state: AppstateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n    return connect(mapStateProps)(RedirectComponent)\r\n}"],"names":["ProfileStatusHooks","props","useState","editMode","setEditMode","status","localstatus","setLocalStatus","useEffect","onDoubleClick","isOwner","value","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfo","profile","Preloader","avatar","photos","large","className","obc","type","target","files","length","savePhoto","style","width","src","user","alt","color","fontSize","fullName","aboutMe","contacts","github","instagram","facebook","vk","website","Post","Likes","like","setLike","avatars","userPhoto","message","onClick","Like","height","validatorMaxSymbols","maxLengthCreator","MyPosts","React","posts","state","postsData","map","el","id","AddNewPostFormRedux","onSubmit","values","sendPostHandler","newPosts","AddNewPostForm","handleSubmit","Field","component","TextArea","validate","requered","name","placeholder","reduxForm","form","MyPostsContainer","connect","profilePage","dispatch","postTextValue","addPost","keyPressHandlerText","key","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","compose","auth","isAuth","setUserProfile","withRouter","WithAuthRedirect","mapStateProps","Component","restProps","to"],"sourceRoot":""}