{"version":3,"file":"static/js/925.22cc1b8f.chunk.js","mappings":"kLAgBMA,EAAiB,WAEnB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAA0B,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAS7D,OAPAI,EAAAA,EAAAA,YAAU,WAEN,OADAN,GAASO,EAAAA,EAAAA,OACF,WACHP,GAASQ,EAAAA,EAAAA,UAEd,CAACR,KAGA,iBAAKS,MAAO,CAACC,OAAQ,OAAQC,MAAO,QAApC,UACgB,UAAXT,IAAsB,0EACvB,SAAEU,EAAF,KACA,SAACC,EAAD,QAKND,EAAqB,WACvB,IAAME,GAAWX,EAAAA,EAAAA,KAA8C,SAAAC,GAAK,OAAIA,EAAMC,KAAKS,YAC7EC,GAAOZ,EAAAA,EAAAA,KAA0B,SAAAC,GAAK,OAAIA,EAAMY,YAAYC,QAAQC,UACpEC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OAnBAjB,EAAAA,EAAAA,YAAU,WACW,IAAD,EAAZgB,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACJ,EAAYR,KAEhBR,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACZ,UAAAa,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,aACtD,KAYC,iBAAKjB,MAAO,CAACC,OAAQ,QAASiB,UAAW,QAASC,SAVtD,SAAuBC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7Ed,GAAcC,GAAc,GAE7BD,GAAcC,GAAc,IAKhC,UAEQT,EAASuB,KAAI,SAACC,EAAGC,GAAJ,OAAUxB,IAASuB,EAAEpB,QAC5B,SAACsB,EAAD,CAAoBC,QAASH,EAAGI,IAAK,SAAvBJ,EAAEK,KAChB,SAACH,EAAD,CAAoBC,QAASH,EAAGI,IAAK,QAAvBJ,EAAEK,QAE1B,gBAAKC,IAAKzB,QAKhBqB,EAA6EK,EAAAA,MAAW,YAAqB,IAAnBJ,EAAkB,EAAlBA,QAASC,EAAS,EAATA,IAErG,OACI,iBACIjC,MAAO,CACHqC,QAAS,OACTC,aAAc,kBACdC,cAAe,SACfC,WAAoB,SAARP,EAAiB,aAAe,YALpD,WAQI,4BACI,gBAAKQ,IAAKT,EAAQU,MAAQV,EAAQU,MAAQC,EAAMC,IAAI,SAAS5C,MAAO,CAACE,MAAO,WAC5E,uBAAI8B,EAAQa,cAGfb,EAAQA,cAKf5B,EAA2B,WAC7B,OAA8BQ,EAAAA,EAAAA,UAAS,IAAvC,eAAOoB,EAAP,KAAgBc,EAAhB,KACMvD,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAA0B,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAE7D,SAASsD,IACW,KAAZf,IACAzC,GAASyD,EAAAA,EAAAA,IAAYhB,IACrBc,EAAW,KAEfA,EAAW,IAGf,OACI,iBAAK9C,MAAO,CAACqC,QAAS,OAAQY,eAAgB,UAA9C,WACI,0BACI,qBAAUC,UAAW,SAAA9B,GACC,KAAdA,EAAE+B,SAAqC,KAAnBnB,EAAQoB,QAC5BL,KAGE/C,MAAO,CAACqD,OAAQ,OAAQpD,OAAQ,OAAQC,MAAO,QAC/CoD,SAAU,SAAAlC,GAAC,OAAI0B,EAAW1B,EAAEE,cAAciC,QAAQA,MAAOvB,OAEvE,0BACI,mBAAQwB,SAAqB,UAAX/D,EACVgE,QAAS,kBAAMV,KADvB,wBAQhB,UAxH2B,WACvB,OACI,0BACI,SAACzD,EAAD","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport user from '../../../src/assets/images/user.png'\r\nimport {IChatMessageAPIType} from '../../api/chat-api';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {IChatMessageType, sendMessage, startMessagesListening, stopMessagesListening} from '../../redux/chat-reducer';\r\nimport {AppstateType} from '../../redux/redux-store';\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppstateType>(state => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div style={{height: '80vh', width: '60vw'}}>\r\n            {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n            < Messages/>\r\n            <AddMessageForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n    const messages = useSelector<AppstateType, IChatMessageType[]>(state => state.chat.messages)\r\n    const myID = useSelector<AppstateType>(state => state.profilePage.profile.userId)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [autoScroll, setAutoScroll] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (autoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [autoScroll, messages])\r\n\r\n    useEffect(() => {\r\n        messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n    }, [])\r\n\r\n    function scrollHandler(e: React.UIEvent<HTMLDivElement, UIEvent>) {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 400) {\r\n            !autoScroll && setAutoScroll(true)\r\n        } else {\r\n            autoScroll && setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '350px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {\r\n                messages.map((m, i) => myID === m.userId\r\n                    ? <Message key={m.id} message={m} pos={'right'}/>\r\n                    : <Message key={m.id} message={m} pos={'left'}/>)\r\n            }\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: React.FC<{ message: IChatMessageAPIType, pos: 'left' | 'right' }> = React.memo(({message, pos}) => {\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                borderBottom: '1px solid white',\r\n                flexDirection: 'column',\r\n                alignItems: pos === 'left' ? 'flex-start' : 'flex-end'\r\n            }}\r\n        >\r\n            <div>\r\n                <img src={message.photo ? message.photo : user} alt=\"avatar\" style={{width: '30px'}}/>\r\n                <b>{message.userName}</b>\r\n\r\n            </div>\r\n            {message.message}\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppstateType>(state => state.chat.status)\r\n\r\n    function sendMessagHandler() {\r\n        if (message !== '') {\r\n            dispatch(sendMessage(message))\r\n            setMessage('')\r\n        }\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <div>\r\n                <textarea onKeyDown={e => {\r\n                    if (e.keyCode === 13 && message.trim() !== '') {\r\n                        sendMessagHandler()\r\n                    }\r\n                }}\r\n                          style={{resize: 'none', height: '60px', width: '50vw'}}\r\n                          onChange={e => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n            </div>\r\n            <div>\r\n                <button disabled={status !== 'ready'}\r\n                        onClick={() => sendMessagHandler()}>Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","style","height","width","Messages","AddMessageForm","messages","myID","profilePage","profile","userId","messagesAnchorRef","useRef","useState","autoScroll","setAutoScroll","current","scrollIntoView","behavior","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","i","Message","message","pos","id","ref","React","display","borderBottom","flexDirection","alignItems","src","photo","user","alt","userName","setMessage","sendMessagHandler","sendMessage","justifyContent","onKeyDown","keyCode","trim","resize","onChange","value","disabled","onClick"],"sourceRoot":""}