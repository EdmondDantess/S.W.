{"version":3,"file":"static/js/3.8545e956.chunk.js","mappings":"4LACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,kBAAoB,mCAAmC,WAAa,4BAA4B,SAAW,0BAA0B,eAAiB,gCAAgC,SAAW,0BAA0B,SAAW,0BAA0B,cAAgB,gC,SCSnWA,EAAa,SAACC,GACzB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,gBAAKC,UAAWC,EAAAA,OAAa,IAAMA,EAAAA,OAAnC,UACE,UAAC,KAAD,CAASC,GAAIJ,EAAMK,gBAAiBF,EAAAA,WAApC,WACE,gBAAKG,IAAKP,EAAMQ,UAAWC,IAAI,QAAQN,UAAWC,EAAAA,WACjDJ,EAAMU,WCTFC,EAAU,SAACX,GACtB,OAAO,gBAAKG,UAAWC,EAAAA,QAAhB,SAA8BJ,EAAMY,Q,uCCGvCC,GAAsBC,EAAAA,EAAAA,GAAiB,KA6DvCC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,wBAArCD,EAhBmD,SAAChB,GAC5E,OACI,0BACI,kBAAMkB,SAAUlB,EAAMmB,aAAchB,UAAWC,EAAAA,SAA/C,WACI,SAACgB,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAsBH,KAAK,iBACrEe,YAAY,qBAAqBtB,UAAWC,EAAAA,iBACnD,mBAAQD,UAAWC,EAAAA,iBAAnB,0B,6BCtBhB,GAAesB,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KApBoB,SAACC,GACrB,MAAO,CACHA,MAAOA,EAAMC,gBAGM,SAACC,GACxB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,GAAsBD,KAGnCE,oBAAqB,SAACC,EAAuCC,GAC3C,UAAVD,EAAEE,KACFP,GAASG,EAAAA,EAAAA,GAAsBG,SAQ3CE,EAAAA,EAFJ,ED3BuB,SAACtC,GACpB,IAAI4B,EAAQ5B,EAAM4B,MACdW,EAAYX,EAAMY,YAAYC,KAAI,SAACC,GACnC,OACI,gBAAKvC,UAAWC,EAAAA,aAAhB,UACI,SAACL,EAAD,CACIW,KAAMgC,EAAGhC,KACTR,GAAIwC,EAAGxC,GACPM,UAAWkC,EAAGlC,aAJiBkC,EAAGxC,OAU9CyC,EAAWf,EAAMgB,YAAYH,KAAI,SAACC,GAClC,OACI,gBAAKvC,UAAWC,EAAAA,SAAhB,UACI,SAACO,EAAD,CAASC,KAAM8B,EAAGG,WADaH,EAAGxC,OAgB9C,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,kBAAhB,SAAwCmC,KACxC,gBAAKpC,UAAWC,EAAAA,eAAhB,SAAqCuC,KAErC,SAAC5B,EAAD,CAAqBG,SAXZ,SAAC4B,GACd9C,EAAM+B,WAAWe,EAASC,gBAC1BD,EAASC,eAAiB,a,gIEhC5BC,EAAgB,SAACpB,GACnB,MAAO,CACHqB,OAAQrB,EAAMsB,KAAKD,SAIpB,SAASX,EAAoBa,GAQhC,OADiCxB,EAAAA,EAAAA,IAAQqB,EAARrB,EANjC,SAA2B3B,GACvB,IAAKiD,EAAwBjD,EAAxBiD,OAAWG,GAAhB,OAA6BpD,EAA7B,GACA,OAAKiD,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAU/C,GAAG","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__kP-Vn\",\"dialogsItems\":\"Dialogs_dialogsItems__FN6qi\",\"parentDialogsItem\":\"Dialogs_parentDialogsItem__UoGTR\",\"activeLink\":\"Dialogs_activeLink__lMvpn\",\"messages\":\"Dialogs_messages__6wrFq\",\"parentMessages\":\"Dialogs_parentMessages__IZPk9\",\"avatarka\":\"Dialogs_avatarka__AcsZw\",\"formText\":\"Dialogs_formText__CmLkk\",\"textAreaInput\":\"Dialogs_textAreaInput__Dn0Ly\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport obc from \"./../Dialogs.module.css\";\r\n\r\ntype DialogItemTypeProps = {\r\n  name: string;\r\n  id: number;\r\n  urlAvatar: string\r\n};\r\n\r\nexport const DialogItem = (props: DialogItemTypeProps) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={obc.dialog + \" \" + obc.active}>\r\n      <NavLink to={path} activeClassName={obc.activeLink}>\r\n        <img src={props.urlAvatar} alt=\"Error\" className={obc.avatarka}/>\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport obc from \"./../Dialogs.module.css\";\r\n\r\ntype MessageTypeProps = {\r\n  text: string;\r\n};\r\n\r\nexport const Message = (props: MessageTypeProps) => {\r\n  return <div className={obc.message}>{props.text}</div>;\r\n};\r\n","import React from 'react';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport obc from './Dialogs.module.css';\r\nimport {Message} from './Message/Message';\r\nimport {typeDialogProps} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {TextArea} from '../../common/FormsControls';\r\nimport {maxLengthCreator, requered} from '../../utils/validators/validators';\r\nimport style from '../../common/FormsControls.module.css';\r\n\r\n\r\nconst validatorMaxSymbols = maxLengthCreator(100)\r\n\r\nexport const Dialogs = (props: typeDialogProps) => {\r\n    let state = props.state\r\n    let usersName = state.dialogsData.map((el) => {\r\n        return (\r\n            <div className={obc.dialogsItems} key={el.id}>\r\n                <DialogItem\r\n                    name={el.name}\r\n                    id={el.id}\r\n                    urlAvatar={el.urlAvatar}\r\n                />\r\n            </div>\r\n        );\r\n    });\r\n\r\n    let messages = state.messageData.map((el) => {\r\n        return (\r\n            <div className={obc.messages} key={el.id}>\r\n                <Message text={el.message}/>\r\n            </div>\r\n        );\r\n    });\r\n\r\n\r\n    // const keyPressHandlerText = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    //     props.keyPressHandlerText(e)\r\n    // }\r\n    const onSubmit = (formData: FormDataTypeDialog) => {\r\n        props.addMessage(formData.newMessageBody)\r\n        formData.newMessageBody = ''\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={obc.dialogs}>\r\n            <div className={obc.parentDialogsItem}>{usersName}</div>\r\n            <div className={obc.parentMessages}>{messages}</div>\r\n\r\n            <AddMessageFormRedux onSubmit={onSubmit}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataTypeDialog>> = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit} className={obc.formText}>\r\n                <Field component={TextArea} validate={[requered, validatorMaxSymbols]} name=\"newMessageBody\"\r\n                       placeholder=\"Enter your message\" className={obc.textAreaInput}/>\r\n                <button className={obc.buttonInTextArea}>Send</button>\r\n\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\ntype FormDataTypeDialog = {\r\n    newMessageBody: string\r\n}\r\nconst AddMessageFormRedux = reduxForm<FormDataTypeDialog>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","import React, {KeyboardEvent} from 'react';\r\nimport {addMessageInDialogsAC, dialogsPagePropsType, } from '../../redux/dialogsPage-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {ReduxStateType} from '../../redux/redux-store';\r\nimport {compose, Dispatch} from 'redux';\r\n\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\n\r\ntype MapStateProps = {\r\n    state: dialogsPagePropsType\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    addMessage: (newMes: string) => void\r\n    keyPressHandlerText: (e: KeyboardEvent<HTMLTextAreaElement>, valueText: string) => void\r\n}\r\n\r\nexport type  typeDialogProps = MapStateProps & MapDispatchProps\r\n\r\nconst mapStateToProps = (state: ReduxStateType): MapStateProps => {\r\n    return {\r\n        state: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchProps => {\r\n    return {\r\n        addMessage: (newMes: string) => {\r\n            dispatch(addMessageInDialogsAC(newMes))\r\n        },\r\n\r\n        keyPressHandlerText: (e: KeyboardEvent<HTMLTextAreaElement>, messageValueTextarea: string) => {\r\n            if (e.key === 'Enter') {\r\n                dispatch(addMessageInDialogsAC(messageValueTextarea))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {ReduxStateType} from '../redux/redux-store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst MapStateProps = (state: ReduxStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(MapStateProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}"],"names":["DialogItem","props","path","id","className","obc","to","activeClassName","src","urlAvatar","alt","name","Message","text","validatorMaxSymbols","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","requered","placeholder","compose","connect","state","dialogsPage","dispatch","addMessage","newMes","addMessageInDialogsAC","keyPressHandlerText","e","messageValueTextarea","key","withAuthRedirect","usersName","dialogsData","map","el","messages","messageData","message","formData","newMessageBody","MapStateProps","isAuth","auth","Component","restProps"],"sourceRoot":""}